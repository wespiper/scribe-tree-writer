> from typing import Optional

> from fastapi import APIRouter, Depends, HTTPException, status
> from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
> from pydantic import BaseModel, EmailStr
> from sqlalchemy import select
> from sqlalchemy.ext.asyncio import AsyncSession

> from app.core.database import get_db
> from app.core.security import (
>     create_access_token,
>     decode_access_token,
>     get_password_hash,
>     verify_password,
> )
> from app.models.user import User

> router = APIRouter()
> oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/auth/login")


> class UserCreate(BaseModel):
>     email: EmailStr
>     password: str
>     full_name: Optional[str] = None


> class UserResponse(BaseModel):
>     id: str
>     email: str
>     full_name: Optional[str]
>     is_active: bool


> class Token(BaseModel):
>     access_token: str
>     token_type: str


> async def get_current_user(token: str = Depends(oauth2_scheme), db: AsyncSession = Depends(get_db)) -> User:
>     credentials_exception = HTTPException(
>         status_code=status.HTTP_401_UNAUTHORIZED,
>         detail="Could not validate credentials",
>         headers={"WWW-Authenticate": "Bearer"},
>     )

>     payload = decode_access_token(token)
>     if payload is None:
>         raise credentials_exception

>     user_id: str = payload.get("sub")
>     if user_id is None:
>         raise credentials_exception

>     result = await db.execute(select(User).where(User.id == user_id))
!     user = result.scalar_one_or_none()

!     if user is None:
!         raise credentials_exception
!     return user


> @router.post("/register", response_model=UserResponse)
> async def register(user_data: UserCreate, db: AsyncSession = Depends(get_db)):
      # Check if user exists
>     result = await db.execute(select(User).where(User.email == user_data.email))
!     if result.scalar_one_or_none():
!         raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Email already registered")

      # Create new user
!     hashed_password = get_password_hash(user_data.password)
!     user = User(email=user_data.email, hashed_password=hashed_password, full_name=user_data.full_name)
!     db.add(user)
!     await db.commit()
!     await db.refresh(user)

!     return UserResponse(id=str(user.id), email=user.email, full_name=user.full_name, is_active=user.is_active)


> @router.post("/login", response_model=Token)
> async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: AsyncSession = Depends(get_db)):
      # Find user
>     result = await db.execute(select(User).where(User.email == form_data.username))
!     user = result.scalar_one_or_none()

!     if not user or not verify_password(form_data.password, user.hashed_password):
!         raise HTTPException(
!             status_code=status.HTTP_401_UNAUTHORIZED,
!             detail="Incorrect email or password",
!             headers={"WWW-Authenticate": "Bearer"},
!         )

      # Create token
!     access_token = create_access_token(data={"sub": user.id})
!     return {"access_token": access_token, "token_type": "bearer"}


> @router.get("/me", response_model=UserResponse)
> async def get_me(current_user: User = Depends(get_current_user)):
>     return UserResponse(
>         id=str(current_user.id), email=current_user.email, full_name=current_user.full_name, is_active=current_user.is_active
>     )
